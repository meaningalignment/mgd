datasource db {
  provider          = "postgres"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING_SHADOW") // used for migrations
  extensions        = [pgvector(map: "vector")] // Add the pgvector extension
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"] // Enable the postgresqlExtensions. Currently in preview
}

model User {
  id                        Int                         @id @default(autoincrement())
  email                     String                      @unique
  name                      String?
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  role                      String[]                    @default(["USER"])
  isAdmin                   Boolean                     @default(false)
  chats                     Chat[]
  edges                     Edge[]
  DeduplicationVerification DeduplicationVerification[]
  Deliberation              Deliberation[]
}

model Deliberation {
  id                         Int                         @id @default(autoincrement())
  title                      String
  welcomeText                String?
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt
  createdBy                  Int
  user                       User                        @relation(fields: [createdBy], references: [id])
  valuesCards                ValuesCard[]
  edges                      Edge[]
  questions                  Question[]
  choiceTypes                ChoiceType[]
  deduplicatedCards          DeduplicatedCard[]
  chats                      Chat[]
  canonicalValuesCards       CanonicalValuesCard[]
  edgeHypotheses             EdgeHypothesis[]
  deduplicationVerifications DeduplicationVerification[]
}

model EmailCodes {
  email              String   @unique
  loginCode          String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  loginCodeExpiresAt DateTime
  register           Boolean  @default(false)
  extraData          Json?
}

model ValuesCard {
  id                        Int                          @id @default(autoincrement())
  title                     String
  description               String
  policies                  String[]
  createdAt                 DateTime                     @default(now())
  updatedAt                 DateTime                     @updatedAt
  canonicalCardId           Int?
  chatId                    String                       @unique
  chat                      Chat?                        @relation(fields: [chatId], references: [id], onDelete: Cascade)
  canonicalCard             CanonicalValuesCard?         @relation(fields: [canonicalCardId], references: [id], onDelete: SetNull)
  embedding                 Unsupported("vector(1536)")?
  DeduplicationVerification DeduplicationVerification[]
  deduplications            Deduplication[]
  deliberationId            Int
  deliberation              Deliberation                 @relation(fields: [deliberationId], references: [id], onDelete: Cascade)
}

model CanonicalValuesCard {
  id                 Int                          @id @default(autoincrement())
  title              String
  description        String
  policies           String[]
  createdAt          DateTime                     @default(now())
  updatedAt          DateTime                     @updatedAt
  embedding          Unsupported("vector(1536)")?
  valuesCards        ValuesCard[]
  edgesFrom          Edge[]                       @relation("FromValueRelation")
  edgesTo            Edge[]                       @relation("ToValueRelation")
  edgeHypothesisFrom EdgeHypothesis[]             @relation("FromHypothesizedValueRelation")
  edgeHypothesisTo   EdgeHypothesis[]             @relation("ToHypothesizedValueRelation")
  deliberationId     Int
  deliberation       Deliberation                 @relation(fields: [deliberationId], references: [id], onDelete: Cascade)

  @@unique([title, description, policies]) // Prevent duplicate insertions.
}

model Chat {
  id             String       @id
  userId         Int
  transcript     Json
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  evaluation     Json?
  copiedFromId   String? // In order to filter out copied chats from analytics and other queries.
  questionId     String       @default("abortion")
  ValuesCard     ValuesCard?
  user           User         @relation(fields: [userId], references: [id])
  copiedFrom     Chat?        @relation("ChatToCopiedFrom", fields: [copiedFromId], references: [id], onDelete: Cascade)
  copies         Chat[]       @relation("ChatToCopiedFrom")
  deliberationId Int
  deliberation   Deliberation @relation(fields: [deliberationId], references: [id], onDelete: Cascade)
}

enum EdgeType {
  upgrade
  no_upgrade
  not_sure
}

model Edge {
  userId         Int
  fromId         Int
  toId           Int
  story          String              @default("OLD")
  choiceTypeId   String
  runId          String              @default("OLD")
  type           EdgeType            @default(upgrade)
  comment        String?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  user           User                @relation(fields: [userId], references: [id])
  from           CanonicalValuesCard @relation("FromValueRelation", fields: [fromId], references: [id], onDelete: Cascade)
  to             CanonicalValuesCard @relation("ToValueRelation", fields: [toId], references: [id], onDelete: Cascade)
  choiceType     ChoiceType          @relation(fields: [choiceTypeId], references: [id])
  deliberationId Int
  deliberation   Deliberation        @relation(fields: [deliberationId], references: [id], onDelete: Cascade)

  @@id([userId, fromId, toId])
}

model EdgeHypothesis {
  fromId         Int
  toId           Int
  story          String?
  choiceTypeId   String
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  runId          String               @default("OLD")
  from           CanonicalValuesCard? @relation("FromHypothesizedValueRelation", fields: [fromId], references: [id], onDelete: Cascade)
  to             CanonicalValuesCard? @relation("ToHypothesizedValueRelation", fields: [toId], references: [id], onDelete: Cascade)
  choiceType     ChoiceType           @relation(fields: [choiceTypeId], references: [id])
  deliberationId Int
  deliberation   Deliberation         @relation(fields: [deliberationId], references: [id], onDelete: Cascade)

  @@id([fromId, toId])
}

model ChoiceType {
  id                      String                    @id
  ChoiceTypesForQuestions ChoiceTypesForQuestions[]
  Edge                    Edge[]
  EdgeHypothesis          EdgeHypothesis[]
  deliberationId          Int
  deliberation            Deliberation              @relation(fields: [deliberationId], references: [id], onDelete: Cascade)
}

model Question {
  id                      String                    @id
  question                String
  title                   String?
  seedMessage             String?
  ChoiceTypesForQuestions ChoiceTypesForQuestions[]
  deliberationId          Int
  deliberation            Deliberation              @relation(fields: [deliberationId], references: [id], onDelete: Cascade)
}

model ChoiceTypesForQuestions {
  choiceType   ChoiceType @relation(fields: [choiceTypeId], references: [id], onDelete: Cascade)
  question     Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  application  String?
  choiceTypeId String
  questionId   String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@id([choiceTypeId, questionId])
}

model DeduplicatedCard {
  id                        Int                          @id @default(autoincrement())
  generation                Int
  title                     String
  description               String
  policies                  String[]
  createdAt                 DateTime                     @default(now())
  updatedAt                 DateTime                     @updatedAt
  embedding                 Unsupported("vector(1536)")?
  deduplications            Deduplication[]
  DeduplicationVerification DeduplicationVerification[]
  deliberationId            Int
  deliberation              Deliberation                 @relation(fields: [deliberationId], references: [id], onDelete: Cascade)
}

model Deduplication {
  valuesCardId       Int
  deduplicatedCardId Int
  generation         Int
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  valuesCard         ValuesCard       @relation(fields: [valuesCardId], references: [id])
  deduplicatedCard   DeduplicatedCard @relation(fields: [deduplicatedCardId], references: [id])

  @@unique([valuesCardId, generation])
  @@unique([valuesCardId, deduplicatedCardId])
}

enum DeduplicationVerificationOption {
  same
  different
  unsure
}

model DeduplicationVerification {
  userId             Int
  valuesCardId       Int
  deduplicatedCardId Int
  option             DeduplicationVerificationOption
  createdAt          DateTime                        @default(now())
  updatedAt          DateTime                        @updatedAt
  user               User                            @relation(fields: [userId], references: [id], onDelete: Cascade)
  valuesCard         ValuesCard                      @relation(fields: [valuesCardId], references: [id], onDelete: Cascade)
  deduplicatedCard   DeduplicatedCard                @relation(fields: [deduplicatedCardId], references: [id], onDelete: Cascade)
  Deliberation       Deliberation?                   @relation(fields: [deliberationId], references: [id])
  deliberationId     Int?

  @@id([userId, valuesCardId, deduplicatedCardId])
}
